to do:
[X] Set up python and vscode and git and stuff on my new laptop
[X] Figure out how to do pdf understanding stuff
[X] Prompt engineer
[X] Think about stack?
    - nextjs, (flask, fastapi, django), supabase
    - nextjs, fastapi, mongodb
[] Hit purple ranks in tekken (I got to tenryu then rank got reset)
[] Refactor the backend so it is cleaner

ideas:
- a database to save papers that have already been analyzed to save time (and money on my end)
    - With the database, there could be some sort of rating system?
    - rating system to rate the paper itself (probably not)
    - rating system to rate the analysis
- a built in pdf reader with which a user can highlight and make notes
    - pdf.js?
    - this may also require user auth

pipeline:
1. user can either
    - type in the paper's title, if it already exists, we can use that
    otherwise they will need to upload their paper
        - i think mongodb can do this
    - send in the pdf of a paper
        - analyze the first page to figure out the title of the paper, in which if it already exists
        in the database, we can use that
            - endpoint for taking first page, getting title, then query the database
        - otherwise, we will need to analyze this new paper

2. analyze the paper
    - send the paper to the database, as well as analyze it
    - give the user the prerequisites
    - make a copy of the user's paper so they can leave comments and such
    - we will also need the copy for the chatbot